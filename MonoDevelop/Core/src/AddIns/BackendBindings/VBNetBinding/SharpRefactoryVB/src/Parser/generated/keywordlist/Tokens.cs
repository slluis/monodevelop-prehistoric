// this file was autogenerated by a tool.
using System;

namespace ICSharpCode.SharpRefactory.Parser.VB
{
	public sealed class Tokens
	{
		// ----- terminal classes -----
		public const int EOF                  = 0;
		public const int EOL                  = 1;
		public const int Identifier           = 2;
		public const int LiteralString        = 3;
		public const int LiteralCharacter     = 4;
		public const int LiteralInteger       = 5;
		public const int LiteralDouble        = 6;
		public const int LiteralSingle        = 7;
		public const int LiteralDecimal       = 8;
		public const int LiteralDate          = 9;

		// ----- special character -----
		public const int Dot                  = 10;
		public const int Assign               = 11;
		public const int Comma                = 12;
		public const int Colon                = 13;
		public const int Plus                 = 14;
		public const int Minus                = 15;
		public const int Times                = 16;
		public const int Div                  = 17;
		public const int DivInteger           = 18;
		public const int ConcatString         = 19;
		public const int Power                = 20;
		public const int OpenCurlyBrace       = 21;
		public const int CloseCurlyBrace      = 22;
		public const int OpenSquareBracket    = 23;
		public const int CloseSquareBracket   = 24;
		public const int OpenParenthesis      = 25;
		public const int CloseParenthesis     = 26;
		public const int GreaterThan          = 27;
		public const int LessThan             = 28;
		public const int NotEqual             = 29;
		public const int GreaterEqual         = 30;
		public const int LessEqual            = 31;
		public const int ShiftLeft            = 32;
		public const int ShiftRight           = 33;
		public const int PlusAssign           = 34;
		public const int PowerAssign          = 35;
		public const int MinusAssign          = 36;
		public const int TimesAssign          = 37;
		public const int DivAssign            = 38;
		public const int DivIntegerAssign     = 39;
		public const int ShiftLeftAssign      = 40;
		public const int ShiftRightAssign     = 41;
		public const int ConcatStringAssign   = 42;

		// ----- keywords -----
		public const int AddHandler           = 43;
		public const int AddressOf            = 44;
		public const int Alias                = 45;
		public const int And                  = 46;
		public const int AndAlso              = 47;
		public const int Ansi                 = 48;
		public const int As                   = 49;
		public const int Assembly             = 50;
		public const int Auto                 = 51;
		public const int Binary               = 52;
		public const int Boolean              = 53;
		public const int ByRef                = 54;
		public const int Byte                 = 55;
		public const int ByVal                = 56;
		public const int Call                 = 57;
		public const int Case                 = 58;
		public const int Catch                = 59;
		public const int CBool                = 60;
		public const int CByte                = 61;
		public const int CChar                = 62;
		public const int CDate                = 63;
		public const int CDbl                 = 64;
		public const int CDec                 = 65;
		public const int Char                 = 66;
		public const int CInt                 = 67;
		public const int Class                = 68;
		public const int CLng                 = 69;
		public const int CObj                 = 70;
		public const int Compare              = 71;
		public const int Const                = 72;
		public const int CShort               = 73;
		public const int CSng                 = 74;
		public const int CStr                 = 75;
		public const int CType                = 76;
		public const int Date                 = 77;
		public const int Decimal              = 78;
		public const int Declare              = 79;
		public const int Default              = 80;
		public const int Delegate             = 81;
		public const int Dim                  = 82;
		public const int DirectCast           = 83;
		public const int Do                   = 84;
		public const int Double               = 85;
		public const int Each                 = 86;
		public const int Else                 = 87;
		public const int ElseIf               = 88;
		public const int End                  = 89;
		public const int EndIf                = 90;
		public const int Enum                 = 91;
		public const int Erase                = 92;
		public const int Error                = 93;
		public const int Event                = 94;
		public const int Exit                 = 95;
		public const int Explicit             = 96;
		public const int False                = 97;
		public const int Finally              = 98;
		public const int For                  = 99;
		public const int Friend               = 100;
		public const int Function             = 101;
		public const int Get                  = 102;
		new public const int GetType              = 103;
		public const int GoSub                = 104;
		public const int GoTo                 = 105;
		public const int Handles              = 106;
		public const int If                   = 107;
		public const int Implements           = 108;
		public const int Imports              = 109;
		public const int In                   = 110;
		public const int Inherits             = 111;
		public const int Integer              = 112;
		public const int Interface            = 113;
		public const int Is                   = 114;
		public const int Let                  = 115;
		public const int Lib                  = 116;
		public const int Like                 = 117;
		public const int Long                 = 118;
		public const int Loop                 = 119;
		public const int Me                   = 120;
		public const int Mod                  = 121;
		public const int Module               = 122;
		public const int MustInherit          = 123;
		public const int MustOverride         = 124;
		public const int MyBase               = 125;
		public const int MyClass              = 126;
		public const int Namespace            = 127;
		public const int New                  = 128;
		public const int Next                 = 129;
		public const int Not                  = 130;
		public const int Nothing              = 131;
		public const int NotInheritable       = 132;
		public const int NotOverridable       = 133;
		public const int Object               = 134;
		public const int Off                  = 135;
		public const int On                   = 136;
		public const int Option               = 137;
		public const int Optional             = 138;
		public const int Or                   = 139;
		public const int OrElse               = 140;
		public const int Overloads            = 141;
		public const int Overridable          = 142;
		public const int Override             = 143;
		public const int Overrides            = 144;
		public const int ParamArray           = 145;
		public const int Preserve             = 146;
		public const int Private              = 147;
		public const int Property             = 148;
		public const int Protected            = 149;
		public const int Public               = 150;
		public const int RaiseEvent           = 151;
		public const int ReadOnly             = 152;
		public const int ReDim                = 153;
		public const int RemoveHandler        = 154;
		public const int Resume               = 155;
		public const int Return               = 156;
		public const int Select               = 157;
		public const int Set                  = 158;
		public const int Shadows              = 159;
		public const int Shared               = 160;
		public const int Short                = 161;
		public const int Single               = 162;
		public const int Static               = 163;
		public const int Step                 = 164;
		public const int Stop                 = 165;
		public const int Strict               = 166;
		public const int String               = 167;
		public const int Structure            = 168;
		public const int Sub                  = 169;
		public const int SyncLock             = 170;
		public const int Text                 = 171;
		public const int Then                 = 172;
		public const int Throw                = 173;
		public const int To                   = 174;
		public const int True                 = 175;
		public const int Try                  = 176;
		public const int TypeOf               = 177;
		public const int Unicode              = 178;
		public const int Until                = 179;
		public const int Variant              = 180;
		public const int Wend                 = 181;
		public const int When                 = 182;
		public const int While                = 183;
		public const int With                 = 184;
		public const int WithEvents           = 185;
		public const int WriteOnly            = 186;
		public const int Xor                  = 187;

		string GetTokenString(int token)
		{
			switch (token) {
				case Dot:
					return ".";
				case Assign:
					return "=";
				case Comma:
					return ",";
				case Colon:
					return ":";
				case Plus:
					return "+";
				case Minus:
					return "-";
				case Times:
					return "*";
				case Div:
					return "/";
				case DivInteger:
					return "\\";
				case ConcatString:
					return "&";
				case Power:
					return "^";
				case OpenCurlyBrace:
					return "{";
				case CloseCurlyBrace:
					return "}";
				case OpenSquareBracket:
					return "[";
				case CloseSquareBracket:
					return "]";
				case OpenParenthesis:
					return "(";
				case CloseParenthesis:
					return ")";
				case GreaterThan:
					return ">";
				case LessThan:
					return "<";
				case NotEqual:
					return "<>";
				case GreaterEqual:
					return ">=";
				case LessEqual:
					return "<=";
				case ShiftLeft:
					return "<<";
				case ShiftRight:
					return ">>";
				case PlusAssign:
					return "+=";
				case PowerAssign:
					return "^=";
				case MinusAssign:
					return "-=";
				case TimesAssign:
					return "*=";
				case DivAssign:
					return "/=";
				case DivIntegerAssign:
					return "\\=";
				case ShiftLeftAssign:
					return "<<=";
				case ShiftRightAssign:
					return ">>=";
				case ConcatStringAssign:
					return "&=";
				case AddHandler:
					return "AddHandler";
				case AddressOf:
					return "AddressOf";
				case Alias:
					return "Alias";
				case And:
					return "And";
				case AndAlso:
					return "AndAlso";
				case Ansi:
					return "Ansi";
				case As:
					return "As";
				case Assembly:
					return "Assembly";
				case Auto:
					return "Auto";
				case Binary:
					return "Binary";
				case Boolean:
					return "Boolean";
				case ByRef:
					return "ByRef";
				case Byte:
					return "Byte";
				case ByVal:
					return "ByVal";
				case Call:
					return "Call";
				case Case:
					return "Case";
				case Catch:
					return "Catch";
				case CBool:
					return "CBool";
				case CByte:
					return "CByte";
				case CChar:
					return "CChar";
				case CDate:
					return "CDate";
				case CDbl:
					return "CDbl";
				case CDec:
					return "CDec";
				case Char:
					return "Char";
				case CInt:
					return "CInt";
				case Class:
					return "Class";
				case CLng:
					return "CLng";
				case CObj:
					return "CObj";
				case Compare:
					return "Compare";
				case Const:
					return "Const";
				case CShort:
					return "CShort";
				case CSng:
					return "CSng";
				case CStr:
					return "CStr";
				case CType:
					return "CType";
				case Date:
					return "Date";
				case Decimal:
					return "Decimal";
				case Declare:
					return "Declare";
				case Default:
					return "Default";
				case Delegate:
					return "Delegate";
				case Dim:
					return "Dim";
				case DirectCast:
					return "DirectCast";
				case Do:
					return "Do";
				case Double:
					return "Double";
				case Each:
					return "Each";
				case Else:
					return "Else";
				case ElseIf:
					return "ElseIf";
				case End:
					return "End";
				case EndIf:
					return "EndIf";
				case Enum:
					return "Enum";
				case Erase:
					return "Erase";
				case Error:
					return "Error";
				case Event:
					return "Event";
				case Exit:
					return "Exit";
				case Explicit:
					return "Explicit";
				case False:
					return "False";
				case Finally:
					return "Finally";
				case For:
					return "For";
				case Friend:
					return "Friend";
				case Function:
					return "Function";
				case Get:
					return "Get";
				case GetType:
					return "GetType";
				case GoSub:
					return "GoSub";
				case GoTo:
					return "GoTo";
				case Handles:
					return "Handles";
				case If:
					return "If";
				case Implements:
					return "Implements";
				case Imports:
					return "Imports";
				case In:
					return "In";
				case Inherits:
					return "Inherits";
				case Integer:
					return "Integer";
				case Interface:
					return "Interface";
				case Is:
					return "Is";
				case Let:
					return "Let";
				case Lib:
					return "Lib";
				case Like:
					return "Like";
				case Long:
					return "Long";
				case Loop:
					return "Loop";
				case Me:
					return "Me";
				case Mod:
					return "Mod";
				case Module:
					return "Module";
				case MustInherit:
					return "MustInherit";
				case MustOverride:
					return "MustOverride";
				case MyBase:
					return "MyBase";
				case MyClass:
					return "MyClass";
				case Namespace:
					return "Namespace";
				case New:
					return "New";
				case Next:
					return "Next";
				case Not:
					return "Not";
				case Nothing:
					return "Nothing";
				case NotInheritable:
					return "NotInheritable";
				case NotOverridable:
					return "NotOverridable";
				case Object:
					return "Object";
				case Off:
					return "Off";
				case On:
					return "On";
				case Option:
					return "Option";
				case Optional:
					return "Optional";
				case Or:
					return "Or";
				case OrElse:
					return "OrElse";
				case Overloads:
					return "Overloads";
				case Overridable:
					return "Overridable";
				case Override:
					return "Override";
				case Overrides:
					return "Overrides";
				case ParamArray:
					return "ParamArray";
				case Preserve:
					return "Preserve";
				case Private:
					return "Private";
				case Property:
					return "Property";
				case Protected:
					return "Protected";
				case Public:
					return "Public";
				case RaiseEvent:
					return "RaiseEvent";
				case ReadOnly:
					return "ReadOnly";
				case ReDim:
					return "ReDim";
				case RemoveHandler:
					return "RemoveHandler";
				case Resume:
					return "Resume";
				case Return:
					return "Return";
				case Select:
					return "Select";
				case Set:
					return "Set";
				case Shadows:
					return "Shadows";
				case Shared:
					return "Shared";
				case Short:
					return "Short";
				case Single:
					return "Single";
				case Static:
					return "Static";
				case Step:
					return "Step";
				case Stop:
					return "Stop";
				case Strict:
					return "Strict";
				case String:
					return "String";
				case Structure:
					return "Structure";
				case Sub:
					return "Sub";
				case SyncLock:
					return "SyncLock";
				case Text:
					return "Text";
				case Then:
					return "Then";
				case Throw:
					return "Throw";
				case To:
					return "To";
				case True:
					return "True";
				case Try:
					return "Try";
				case TypeOf:
					return "TypeOf";
				case Unicode:
					return "Unicode";
				case Until:
					return "Until";
				case Variant:
					return "Variant";
				case Wend:
					return "Wend";
				case When:
					return "When";
				case While:
					return "While";
				case With:
					return "With";
				case WithEvents:
					return "WithEvents";
				case WriteOnly:
					return "WriteOnly";
				case Xor:
					return "Xor";
			}
			throw new System.NotSupportedException("Unknown token:" + token);
		}
	}
}
